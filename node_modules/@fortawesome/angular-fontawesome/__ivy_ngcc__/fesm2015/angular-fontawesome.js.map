{"version":3,"sources":["/Users/i502306/Documents/yogymstudio/node_modules/@fortawesome/angular-fontawesome/fesm2015/angular-fontawesome.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmCC,8FAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqDD,gIAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwID,aAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkJD,aAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2ED,aAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6CD,aAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmED,aAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8CD,4EASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CD,aASC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgDD,aAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAeD,wJA0BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BD,4HAGC","file":"angular-fontawesome.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, Directive, Input, Component, Optional, HostBinding, Renderer2, ElementRef, Inject, forwardRef, NgModule, ɵɵinject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { findIconDefinition, parse, icon, counter, text } from '@fortawesome/fontawesome-svg-core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FaConfig {\n    constructor() {\n        /**\n         * Default prefix to use, when one is not provided with the icon name.\n         *\n         * \\@default 'fas'\n         */\n        this.defaultPrefix = 'fas';\n        /**\n         * Whether components should lookup icon definitions in the global icon\n         * library (the one available from\n         * `import { library } from '\\@fortawesome/fontawesome-svg-core')`.\n         *\n         * See https://github.com/FortAwesome/angular-fontawesome/blob/master/docs/usage/icon-library.md\n         * for detailed description of library modes.\n         *\n         * - 'unset' - Components should lookup icon definitions in the global library\n         * and emit warning if they find a definition there. This option is a default\n         * to assist existing applications with a migration. Applications are expected\n         * to switch to using {\\@link FaIconLibrary}.\n         * - true - Components should lookup icon definitions in the global library.\n         * Note that global icon library is deprecated and support for it will be\n         * removed. This option can be used to temporarily suppress warnings.\n         * - false - Components should not lookup icon definitions in the global\n         * library. Library will throw an error if missing icon is found in the global\n         * library.\n         *\n         * @deprecated This option is deprecated since 0.5.0. In 0.6.0 default will\n         * be changed to false. In 0.7.0 the option will be removed together with the\n         * support for the global icon library.\n         *\n         * \\@default 'unset'\n         */\n        this.globalLibrary = 'unset';\n    }\n}\nFaConfig.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ FaConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function FaConfig_Factory() { return new FaConfig(); }, token: FaConfig, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FaIconLibrary {\n    constructor() {\n        this.definitions = {};\n    }\n    /**\n     * @param {...?} icons\n     * @return {?}\n     */\n    addIcons(...icons) {\n        for (let i = 0; i < icons.length; i++) {\n            /** @type {?} */\n            const icon = icons[i];\n            if (!(icon.prefix in this.definitions)) {\n                this.definitions[icon.prefix] = {};\n            }\n            this.definitions[icon.prefix][icon.iconName] = icon;\n        }\n    }\n    /**\n     * @param {...?} packs\n     * @return {?}\n     */\n    addIconPacks(...packs) {\n        for (let i = 0; i < packs.length; i++) {\n            /** @type {?} */\n            const pack = packs[i];\n            /** @type {?} */\n            const icons = Object.keys(pack).map((/**\n             * @param {?} key\n             * @return {?}\n             */\n            (key) => pack[key]));\n            this.addIcons(...icons);\n        }\n    }\n    /**\n     * @param {?} prefix\n     * @param {?} name\n     * @return {?}\n     */\n    getIconDefinition(prefix, name) {\n        if (prefix in this.definitions && name in this.definitions[prefix]) {\n            return this.definitions[prefix][name];\n        }\n        return null;\n    }\n}\nFaIconLibrary.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ FaIconLibrary.ngInjectableDef = ɵɵdefineInjectable({ factory: function FaIconLibrary_Factory() { return new FaIconLibrary(); }, token: FaIconLibrary, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst faWarnIfIconDefinitionMissing = (/**\n * @param {?} iconSpec\n * @return {?}\n */\n(iconSpec) => {\n    console.error(`FontAwesome: Could not find icon with iconName=${iconSpec.iconName} and prefix=${iconSpec.prefix}. ` +\n        `This warning will become a hard error in 0.6.0.`);\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst faWarnIfIconSpecMissing = (/**\n * @return {?}\n */\n() => {\n    console.error('FontAwesome: Property `icon` is required for `fa-icon`/`fa-duotone-icon` components. ' +\n        `This warning will become a hard error in 0.6.0.`);\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Fontawesome class list.\n * Returns classes array by props.\n * @type {?}\n */\nconst faClassList = (/**\n * @param {?} props\n * @return {?}\n */\n(props) => {\n    /** @type {?} */\n    const classes = {\n        'fa-spin': props.spin,\n        'fa-pulse': props.pulse,\n        'fa-fw': props.fixedWidth,\n        'fa-border': props.border,\n        'fa-li': props.listItem,\n        'fa-inverse': props.inverse,\n        'fa-layers-counter': props.counter,\n        'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',\n        'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both',\n        [`fa-${props.size}`]: props.size !== null,\n        [`fa-rotate-${props.rotate}`]: props.rotate !== null,\n        [`fa-pull-${props.pull}`]: props.pull !== null,\n        [`fa-stack-${props.stackItemSize}`]: props.stackItemSize != null,\n    };\n    return Object.keys(classes)\n        .map((/**\n     * @param {?} key\n     * @return {?}\n     */\n    key => (classes[key] ? key : null)))\n        .filter((/**\n     * @param {?} key\n     * @return {?}\n     */\n    key => key));\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns if is IconLookup or not.\n * @type {?}\n */\nconst isIconLookup = (/**\n * @param {?} i\n * @return {?}\n */\n(i) => {\n    return ((/** @type {?} */ (i))).prefix !== undefined && ((/** @type {?} */ (i))).iconName !== undefined;\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Normalizing icon spec.\n * @type {?}\n */\nconst faNormalizeIconSpec = (/**\n * @param {?} iconSpec\n * @param {?} defaultPrefix\n * @return {?}\n */\n(iconSpec, defaultPrefix) => {\n    if (isIconLookup(iconSpec)) {\n        return iconSpec;\n    }\n    if (Array.isArray(iconSpec) && ((/** @type {?} */ (iconSpec))).length === 2) {\n        return { prefix: iconSpec[0], iconName: iconSpec[1] };\n    }\n    if (typeof iconSpec === 'string') {\n        return { prefix: defaultPrefix, iconName: iconSpec };\n    }\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FaStackItemSizeDirective {\n    constructor() {\n        /**\n         * Specify whether icon inside {\\@link FaStackComponent} should be rendered in\n         * regular size (1x) or as a larger icon (2x).\n         */\n        this.stackItemSize = '1x';\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('size' in changes) {\n            throw new Error('fa-icon is not allowed to customize size when used inside fa-stack. ' +\n                'Set size on the enclosing fa-stack instead: <fa-stack size=\"4x\">...</fa-stack>.');\n        }\n    }\n}\nFaStackItemSizeDirective.decorators = [\n    { type: Directive, args: [{\n                selector: 'fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]',\n            },] }\n];\nFaStackItemSizeDirective.propDecorators = {\n    stackItemSize: [{ type: Input }],\n    size: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FaIconComponent {\n    /**\n     * @param {?} sanitizer\n     * @param {?} config\n     * @param {?} iconLibrary\n     * @param {?} stackItem\n     */\n    constructor(sanitizer, config, iconLibrary, stackItem) {\n        this.sanitizer = sanitizer;\n        this.config = config;\n        this.iconLibrary = iconLibrary;\n        this.stackItem = stackItem;\n        this.classes = [];\n    }\n    /**\n     * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `icon` property directly.\n     * @return {?}\n     */\n    get iconProp() {\n        return this.icon;\n    }\n    /**\n     * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `icon` property directly.\n     * @param {?} value\n     * @return {?}\n     */\n    set iconProp(value) {\n        this.icon = value;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this.icon == null) {\n            return faWarnIfIconSpecMissing();\n        }\n        if (changes) {\n            /** @type {?} */\n            const iconDefinition = this.findIconDefinition(this.icon);\n            if (iconDefinition != null) {\n                /** @type {?} */\n                const params = this.buildParams();\n                this.renderIcon(iconDefinition, params);\n            }\n        }\n    }\n    /**\n     * Programmatically trigger rendering of the icon.\n     *\n     * This method is useful, when creating {\\@link FaIconComponent} dynamically or\n     * changing its inputs programmatically as in these cases icon won't be\n     * re-rendered automatically.\n     * @return {?}\n     */\n    render() {\n        this.ngOnChanges({});\n    }\n    /**\n     * @protected\n     * @param {?} i\n     * @return {?}\n     */\n    findIconDefinition(i) {\n        /** @type {?} */\n        const lookup = faNormalizeIconSpec(i, this.config.defaultPrefix);\n        if ('icon' in lookup) {\n            return lookup;\n        }\n        /** @type {?} */\n        const definition = this.iconLibrary.getIconDefinition(lookup.prefix, lookup.iconName);\n        if (definition != null) {\n            return definition;\n        }\n        /** @type {?} */\n        const globalDefinition = findIconDefinition(lookup);\n        if (globalDefinition != null) {\n            /** @type {?} */\n            const message = 'Global icon library is deprecated. ' +\n                'Consult https://github.com/FortAwesome/angular-fontawesome/blob/master/UPGRADING.md ' +\n                'for the migration instructions.';\n            if (this.config.globalLibrary === 'unset') {\n                console.error('FontAwesome: ' + message);\n            }\n            else if (!this.config.globalLibrary) {\n                throw new Error(message);\n            }\n            return globalDefinition;\n        }\n        faWarnIfIconDefinitionMissing(lookup);\n        return null;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    buildParams() {\n        /** @type {?} */\n        const classOpts = {\n            flip: this.flip,\n            spin: this.spin,\n            pulse: this.pulse,\n            border: this.border,\n            inverse: this.inverse,\n            listItem: this.listItem,\n            size: this.size || null,\n            pull: this.pull || null,\n            rotate: this.rotate || null,\n            fixedWidth: this.fixedWidth,\n            stackItemSize: this.stackItem != null ? this.stackItem.stackItemSize : null,\n        };\n        /** @type {?} */\n        const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n        return {\n            title: this.title,\n            transform: parsedTransform,\n            classes: [...faClassList(classOpts), ...this.classes],\n            mask: this.mask != null ? this.findIconDefinition(this.mask) : null,\n            styles: this.styles != null ? this.styles : {},\n            symbol: this.symbol,\n            attributes: {\n                role: this.a11yRole\n            }\n        };\n    }\n    /**\n     * @private\n     * @param {?} definition\n     * @param {?} params\n     * @return {?}\n     */\n    renderIcon(definition, params) {\n        /** @type {?} */\n        const renderedIcon = icon(definition, params);\n        this.renderedIconHTML = this.sanitizer.bypassSecurityTrustHtml(renderedIcon.html.join('\\n'));\n    }\n}\nFaIconComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'fa-icon',\n                template: ``,\n                host: {\n                    class: 'ng-fa-icon',\n                    '[attr.title]': 'title',\n                }\n            }] }\n];\n/** @nocollapse */\nFaIconComponent.ctorParameters = () => [\n    { type: DomSanitizer },\n    { type: FaConfig },\n    { type: FaIconLibrary },\n    { type: FaStackItemSizeDirective, decorators: [{ type: Optional }] }\n];\nFaIconComponent.propDecorators = {\n    icon: [{ type: Input }],\n    title: [{ type: Input }],\n    spin: [{ type: Input }],\n    pulse: [{ type: Input }],\n    mask: [{ type: Input }],\n    styles: [{ type: Input }],\n    flip: [{ type: Input }],\n    size: [{ type: Input }],\n    pull: [{ type: Input }],\n    border: [{ type: Input }],\n    inverse: [{ type: Input }],\n    symbol: [{ type: Input }],\n    listItem: [{ type: Input }],\n    rotate: [{ type: Input }],\n    fixedWidth: [{ type: Input }],\n    classes: [{ type: Input }],\n    transform: [{ type: Input }],\n    a11yRole: [{ type: Input }],\n    renderedIconHTML: [{ type: HostBinding, args: ['innerHTML',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FaDuotoneIconComponent extends FaIconComponent {\n    /**\n     * @protected\n     * @param {?} i\n     * @return {?}\n     */\n    findIconDefinition(i) {\n        /** @type {?} */\n        const lookup = super.findIconDefinition(i);\n        if (lookup != null && lookup.prefix !== 'fad') {\n            throw new Error('The specified icon does not appear to be a Duotone icon. ' +\n                'Check that you specified the correct style: ' +\n                `<fa-duotone-icon [icon]=\"['fab', '${lookup.iconName}']\"></fa-duotone-icon> ` +\n                `or use: <fa-icon icon=\"${lookup.iconName}\"></fa-icon> instead.`);\n        }\n        return lookup;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    buildParams() {\n        /** @type {?} */\n        const params = super.buildParams();\n        if (this.swapOpacity === true || this.swapOpacity === 'true') {\n            params.classes.push('fa-swap-opacity');\n        }\n        if (this.primaryOpacity != null) {\n            params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();\n        }\n        if (this.secondaryOpacity != null) {\n            params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();\n        }\n        if (this.primaryColor != null) {\n            params.styles['--fa-primary-color'] = this.primaryColor;\n        }\n        if (this.secondaryColor != null) {\n            params.styles['--fa-secondary-color'] = this.secondaryColor;\n        }\n        return params;\n    }\n}\nFaDuotoneIconComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'fa-duotone-icon',\n                template: ``\n            }] }\n];\nFaDuotoneIconComponent.propDecorators = {\n    swapOpacity: [{ type: Input }],\n    primaryOpacity: [{ type: Input }],\n    secondaryOpacity: [{ type: Input }],\n    primaryColor: [{ type: Input }],\n    secondaryColor: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Fontawesome layers.\n */\nclass FaLayersComponent {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     */\n    constructor(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.renderer.addClass(this.elementRef.nativeElement, 'fa-layers');\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('size' in changes) {\n            if (changes.size.currentValue != null) {\n                this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n            }\n            if (changes.size.previousValue != null) {\n                this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n            }\n        }\n    }\n}\nFaLayersComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'fa-layers',\n                template: `<ng-content select=\"fa-icon, fa-duotone-icon, fa-layers-text, fa-layers-counter\"></ng-content>`\n            }] }\n];\n/** @nocollapse */\nFaLayersComponent.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nFaLayersComponent.propDecorators = {\n    size: [{ type: Input }],\n    fixedWidth: [{ type: Input }, { type: HostBinding, args: ['class.fa-fw',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Warns if parent component not existing.\n * @type {?}\n */\nconst faWarnIfParentNotExist = (/**\n * @param {?} parent\n * @param {?} parentName\n * @param {?} childName\n * @return {?}\n */\n(parent, parentName, childName) => {\n    if (!parent) {\n        console.error(`FontAwesome: ${childName} should be used as child of ${parentName} only.`);\n    }\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass FaLayersTextBaseComponent {\n    /**\n     * @param {?} parent\n     * @param {?} sanitizer\n     */\n    constructor(parent, sanitizer) {\n        this.parent = parent;\n        this.sanitizer = sanitizer;\n        this.classes = [];\n        faWarnIfParentNotExist(this.parent, 'FaLayersComponent', this.constructor.name);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes) {\n            this.updateParams();\n            this.updateContent();\n        }\n    }\n    /**\n     * Updating content by params and content.\n     * @private\n     * @return {?}\n     */\n    updateContent() {\n        this.renderedHTML = this.sanitizer.bypassSecurityTrustHtml(this.renderFontawesomeObject(this.content || '', this.params).html.join('\\n'));\n    }\n}\nFaLayersTextBaseComponent.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nFaLayersTextBaseComponent.ctorParameters = () => [\n    { type: FaLayersComponent, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => FaLayersComponent)),] }, { type: Optional }] },\n    { type: DomSanitizer }\n];\nFaLayersTextBaseComponent.propDecorators = {\n    renderedHTML: [{ type: HostBinding, args: ['innerHTML',] }],\n    content: [{ type: Input }],\n    title: [{ type: Input }],\n    styles: [{ type: Input }],\n    classes: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Fontawesome layers counter.\n */\nclass FaLayersCounterComponent extends FaLayersTextBaseComponent {\n    /**\n     * Updating params by component props.\n     * @protected\n     * @return {?}\n     */\n    updateParams() {\n        this.params = {\n            title: this.title,\n            classes: this.classes,\n            styles: this.styles,\n        };\n    }\n    /**\n     * @protected\n     * @param {?} content\n     * @param {?=} params\n     * @return {?}\n     */\n    renderFontawesomeObject(content, params) {\n        return counter(content, params);\n    }\n}\nFaLayersCounterComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'fa-layers-counter',\n                template: '',\n                host: {\n                    class: 'ng-fa-layers-counter'\n                }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Fontawesome layers text.\n */\nclass FaLayersTextComponent extends FaLayersTextBaseComponent {\n    /**\n     * Updating params by component props.\n     * @protected\n     * @return {?}\n     */\n    updateParams() {\n        /** @type {?} */\n        const classOpts = {\n            flip: this.flip,\n            spin: this.spin,\n            pulse: this.pulse,\n            border: this.border,\n            inverse: this.inverse,\n            listItem: this.listItem,\n            size: this.size || null,\n            pull: this.pull || null,\n            rotate: this.rotate || null,\n            fixedWidth: this.fixedWidth\n        };\n        /** @type {?} */\n        const parsedTransform = typeof this.transform === 'string' ? parse.transform(this.transform) : this.transform;\n        this.params = {\n            transform: parsedTransform,\n            classes: [...faClassList(classOpts), ...this.classes],\n            title: this.title,\n            styles: this.styles\n        };\n    }\n    /**\n     * @protected\n     * @param {?} content\n     * @param {?=} params\n     * @return {?}\n     */\n    renderFontawesomeObject(content, params) {\n        return text(content, params);\n    }\n}\nFaLayersTextComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'fa-layers-text',\n                template: '',\n                host: {\n                    class: 'ng-fa-layers-text'\n                }\n            }] }\n];\nFaLayersTextComponent.propDecorators = {\n    spin: [{ type: Input }],\n    pulse: [{ type: Input }],\n    flip: [{ type: Input }],\n    size: [{ type: Input }],\n    pull: [{ type: Input }],\n    border: [{ type: Input }],\n    inverse: [{ type: Input }],\n    listItem: [{ type: Input }],\n    rotate: [{ type: Input }],\n    fixedWidth: [{ type: Input }],\n    transform: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FaStackComponent {\n    /**\n     * @param {?} renderer\n     * @param {?} elementRef\n     */\n    constructor(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.renderer.addClass(this.elementRef.nativeElement, 'fa-stack');\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('size' in changes) {\n            if (changes.size.currentValue != null) {\n                this.renderer.addClass(this.elementRef.nativeElement, `fa-${changes.size.currentValue}`);\n            }\n            if (changes.size.previousValue != null) {\n                this.renderer.removeClass(this.elementRef.nativeElement, `fa-${changes.size.previousValue}`);\n            }\n        }\n    }\n}\nFaStackComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'fa-stack',\n                // TODO: See if it is better to select fa-icon and throw if it does not have stackItemSize directive\n                template: `<ng-content select=\"fa-icon[stackItemSize],fa-duotone-icon[stackItemSize]\"></ng-content>`\n            }] }\n];\n/** @nocollapse */\nFaStackComponent.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nFaStackComponent.propDecorators = {\n    size: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FontAwesomeModule {\n}\nFontAwesomeModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    FaIconComponent,\n                    FaDuotoneIconComponent,\n                    FaLayersComponent,\n                    FaLayersTextComponent,\n                    FaLayersCounterComponent,\n                    FaStackComponent,\n                    FaStackItemSizeDirective,\n                ],\n                exports: [\n                    FaIconComponent,\n                    FaDuotoneIconComponent,\n                    FaLayersComponent,\n                    FaLayersTextComponent,\n                    FaLayersCounterComponent,\n                    FaStackComponent,\n                    FaStackItemSizeDirective,\n                ],\n                entryComponents: [\n                    FaIconComponent,\n                    FaDuotoneIconComponent,\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use FaConfig directly.\n */\nclass FaIconService {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * @return {?}\n     */\n    get defaultPrefix() {\n        return this.config.defaultPrefix;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set defaultPrefix(value) {\n        this.config.defaultPrefix = value;\n    }\n}\nFaIconService.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nFaIconService.ctorParameters = () => [\n    { type: FaConfig }\n];\n/** @nocollapse */ FaIconService.ngInjectableDef = ɵɵdefineInjectable({ factory: function FaIconService_Factory() { return new FaIconService(ɵɵinject(FaConfig)); }, token: FaIconService, providedIn: \"root\" });\n\nexport { FaConfig, FaDuotoneIconComponent, FaIconComponent, FaIconLibrary, FaIconService, FaLayersComponent, FaLayersCounterComponent, FaLayersTextComponent, FaStackComponent, FaStackItemSizeDirective, FontAwesomeModule, FaLayersTextBaseComponent as ɵa };\n"]}